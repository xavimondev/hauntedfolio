---
import Introduction from '@/components/Introduction.astro'
import Share from '@/components/Share.astro'
import TopLanguages from '@/components/TopLanguages.astro'
import TopRepositories from '@/components/TopRepositories.astro'
import { APP_DOMAIN } from '@/constants'
import { getRandomElement } from '@/helpers/getRandomElement'
import Layout from '@/layout.astro'
import { getHauntedFolio, saveHauntedFolio } from '@/services/db'
import { fetchUserData, fetchUserRepos, getLanguagesFromRepositories } from '@/services/github'
import { getCldOgImageUrl } from 'astro-cloudinary/helpers'

const { user } = Astro.params

if (!user) {
	return Astro.redirect('/404')
}

// Let's get the user data from the database
let spookyData = await getHauntedFolio({ userId: user })

if (!spookyData) {
	// console.log('no user, lets save it')
	const data = await fetchUserData({ username: user })
	if (!data) {
		// console.log('user not found in github')
		return Astro.redirect('/user-not-found')
	}

	const topLanguages = (await getLanguagesFromRepositories({ username: user })) ?? []
	const userRepos = await fetchUserRepos({ username: user, numberOfRepos: 6 })

	const topLanguagesAsString = topLanguages?.map((language) => language.name).join(', ') ?? ''

	const featuredProjects =
		userRepos?.reduce((acc, repo) => {
			const { name, stars } = repo
			return `- ${name} with stars: ${stars}\n${acc}`
		}, '') ?? ''

	const topRepositories =
		userRepos?.map((repo) => ({
			...repo,
			primaryLanguage: repo.primaryLanguage?.name ?? 'Unknown'
		})) ?? []

	const { login, bio, name, location, company } = data

	const summary = `
		- username: ${login}
  	- name: ${name}
  	${bio ? `- bio: ${bio}` : ''}
  	${location ? `- location: ${location}` : ''}
  	${company ? `- company: ${location}` : ''}
  	- top languages: ${topLanguagesAsString}
  	- featured projects: ${featuredProjects}
	`

	spookyData = {
		...data,
		summary,
		topRepositories,
		topLanguages
	}

	await saveHauntedFolio({ data: spookyData, isNew: true })
}

const {
	login,
	topLanguages,
	topRepositories,
	summary,
	avatarUrl,
	githubUrl,
	spookyAlias,
	spookyBio,
	spookyAvatarUrl,
	spookyLanguages,
	spookyTopRepositories,
	summaryVideoUrl,
	creepyAvatarPublicId
} = spookyData

let ogImage = `${APP_DOMAIN}/og-image.avif`

const sticker = 'stickers/pepo'
const randomOg = getRandomElement({ list: ['og/land-moon', 'og/haunted-house'] })

if (spookyBio) {
	const ogImageUrl = getCldOgImageUrl({
		src: randomOg,
		overlays: [
			{
				text: {
					fontFamily: 'Creepster',
					fontSize: 90,
					fontWeight: 'bold',
					text: spookyAlias ?? 'PhantomCoder13',
					border: '10px_solid_black',
					letterSpacing: 8,
					stroke: 'stroke',
					color: '#F0E68C'
				},
				position: {
					x: 390,
					y: 160,
					gravity: 'north_west'
				}
			},
			{
				text: {
					fontFamily: 'Merriweather',
					fontSize: 30,
					fontWeight: 'bold',
					text: spookyBio ? spookyBio.replaceAll(',', ' ') : 'A spooky portfolio',
					border: '10px_solid_black',
					stroke: 'stroke',
					color: '#F0E68C'
				},
				position: {
					x: 390,
					y: 275,
					gravity: 'north_west'
				},
				width: 790,
				crop: 'fit'
			},
			{
				publicId: creepyAvatarPublicId,
				width: 310,
				height: 310,
				position: {
					x: 70,
					y: -10,
					gravity: 'west'
				}
			},
			{
				publicId: sticker,
				width: 100,
				height: 100,
				position: {
					x: 70,
					y: 50,
					gravity: 'south_east'
				}
			}
		]
	})
	ogImage = ogImageUrl
}
---

<Layout title={spookyAlias} description={spookyBio} ogImage={ogImage}>
	<Introduction avatarUrl={avatarUrl} summary={summary} username={login} githubUrl={githubUrl} spookyAlias={spookyAlias} spookyBio={spookyBio} spookyAvatarUrl={spookyAvatarUrl}/>
	{topLanguages.length > 0 && <TopLanguages topLanguages={topLanguages} spookyLanguages={spookyLanguages} username={login}/>}
	{topRepositories.length > 0 && <TopRepositories topRepositories={topRepositories} spookyTopRepositories={spookyTopRepositories} username={login}/>}
	<Share username={login} summaryVideoUrl={summaryVideoUrl}/>
</Layout>