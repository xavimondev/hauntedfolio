---
import Flask from '@/components/icons/Flask.astro'
import ShareResult from '@/components/ShareResult.astro'
import Heading from '@/components/Heading.astro'

interface Props {
	username: string
	summaryVideoUrl?: string
}

const { username, summaryVideoUrl } = Astro.props
---

<section class="content-center p-8 xl:w-screen xl:h-screen mx-auto max-w-5xl lg:max-w-[90rem] mt-24 xl:mt-32" data-username={username}>
  <div class="py-2 flex flex-col gap-6 md:gap-8">
    <Heading title="Cursed Sharing"/>
    <p class="text-orange-200 font-body text-base lg:text-2xl max-w-4xl">Share the eerie creations you find or craft within the shadows of the coding world</p>	
	</div>
  <div class:list={["h-auto mx-auto max-w-5xl lg:max-w-[90rem]", summaryVideoUrl ? 'hidden' : 'block']}>
      <div class="size-full inline-flex justify-center">
        <p class="text-2xl lg:text-4xl text-purple-300 font-medium text-center font-body hidden" id="userFact">
          The Vanishing Hitchhiker is a ghost story where a phantom passenger disappears before arriving at their destination.
        </p>
      </div>
      <div class="p-4 bg-black border-2 border-orange-500 rounded-lg shadow-[4px_4px_0px_0px_rgba(249,115,22,1)] space-y-4" id="shareInitialWarning">
        <p class="text-xl md:text-5xl font-bold text-orange-500">ðŸŽƒ Warning ðŸ‘»</p>
        <p class="text-orange-200 text-2xl"><span class="text-orange-600 font-bold">Beware, mortal!</span> The video you seek will take 2 to 7 minutes to conjure. Once summoned, it will haunt your screen for 1 full minute. During the wait, youâ€™ll witness eerie facts creeping in about your repositories... Tread carefully and let the darkness unfold.</p>
        <button 
          class="bg-purple-500 hover:bg-purple-600 text-white font-bold py-2 px-4 border-b-4 border-purple-700 hover:border-purple-800 rounded transform transition-transform hover:scale-105 inline-flex items-center text-xl"
          aria-label="Generate Spooky Video"
          id="btnGenerateSpookyVideo"
        >
          <Flask class="mr-2 size-5" />
          Generate Spooky Video
        </button>  
      </div>
    </div>
  <ShareResult summaryVideoUrl={summaryVideoUrl}/>
</section>

<script>
  import { FINAL_MESSAGES, REAL_LIFE_FACTS } from '@/constants'
  import { getRandomElement } from '@/helpers/get-random-element'
  import { handleShareFacebook, handleShareLinkedin, handleShareX } from '@/helpers/social-sharing'
  import { pollForProcessingImage } from '@cloudinary-util/util'

  const btnDownloadVideo = document.querySelector('#btnDownloadVideo') as HTMLButtonElement
  const btnshareTwitter = document.querySelector('#btnshareTwitter') as HTMLButtonElement
  const btnShareFacebook = document.querySelector('#btnShareFacebook') as HTMLButtonElement
  const btnShareLinkedin = document.querySelector('#btnShareLinkedin') as HTMLButtonElement

  const shareInitialWarning = document.querySelector('#shareInitialWarning') as HTMLDivElement
  const shareResultPanel = document.querySelector('#shareResultPanel') as HTMLDivElement
  const userFact = document.querySelector('#userFact') as HTMLParagraphElement
  const btnGenerateSpookyVideo = document.querySelector('#btnGenerateSpookyVideo') as HTMLButtonElement
  const username = document.querySelector('[data-username]')?.getAttribute('data-username') ?? ''
  
  const videoPlayer = document.querySelector('#video') as HTMLVideoElement

  const generateVideo = async () => {
    const response = await fetch('/api/generate-video', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        username
      })
    })

    const { results: video } = await response.json()
    const videoUrl = video.secure_url.replace('.clt', '.mp4')

    const videoElement = document.querySelector('#video') as HTMLVideoElement
    const result = await pollForProcessingImage({ src: videoUrl }) 

    if (result.success) {
      videoElement.src = videoUrl
      removeInterval()

      const latestMessage = getRandomElement({ list: FINAL_MESSAGES })
      userFact.textContent = latestMessage

      setTimeout(() => {
        userFact.style.display = 'none'
        shareResultPanel.style.display = 'block'
      },2000)

    }else {
      console.error('Error generating video')
    }
  }

  const downloadVideo = async ({videoUrl}: { videoUrl: string }) => {
    const response = await fetch(videoUrl)
    const blob = await response.blob()

    const blobUrl = URL.createObjectURL(blob)

    const a = document.createElement('a')

    a.href = blobUrl
    a.download = 'my-summary.mp4'

    document.body.appendChild(a)
    a.click()

    document.body.removeChild(a)
    URL.revokeObjectURL(blobUrl)
  }

  let shareIntervalId: any

  const generateUserFact = async () => {
    shareInitialWarning.style.display = 'none'
    userFact.style.display = 'block'

    shareIntervalId = setInterval(async () => {
      const oneOrTwo = Math.random() > 0.5 ? 'one' : 'two'
      if(oneOrTwo === 'one'){
        const realFact = getRandomElement({ list: REAL_LIFE_FACTS })
        userFact.textContent = realFact
      }else {
        const response = await fetch('/api/facts',{
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            username
          })
        })
        const { fact } = await response.json()
        userFact.textContent = fact
      }
    },5000)
  }

  const removeInterval = () => {
    clearInterval(shareIntervalId)
    shareIntervalId = null
  }

  btnShareFacebook.addEventListener('click', () => {
    handleShareFacebook({ username })
  })

  btnShareLinkedin.addEventListener('click', () => {
    handleShareLinkedin({ username })
  })

  btnshareTwitter.addEventListener('click', () => {
    handleShareX({ username })
  })

  btnDownloadVideo.addEventListener('click', () => {
    const linkVideo = videoPlayer.src
    downloadVideo({ videoUrl: linkVideo })
  })

  btnGenerateSpookyVideo.addEventListener('click', () => {
    generateVideo()
    generateUserFact()
  })

  
 
</script>