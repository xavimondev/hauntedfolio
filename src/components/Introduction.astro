---
import { getRandomElement } from '@/helpers/getRandomElement'
import { INTRODUCTIONS } from '@/constants'
import UserProfile from '@/components/UserProfile.astro'

interface Props {
	username: string
	avatarUrl: string
	summary: string
	githubUrl: string
	spookyAlias?: string
	spookyBio?: string
	spookyAvatarUrl?: string
}

const { summary, avatarUrl, username, githubUrl, spookyAlias, spookyBio, spookyAvatarUrl } =
	Astro.props

const initialIntro = getRandomElement({ list: INTRODUCTIONS })
---

<section class="content-center min-h-dvh w-screen" data-alias={spookyAlias}>
  <!-- <div class="fixed left-0 top-0 -z-10 aspect-video h-[100vh] w-screen">
    <video
      id="videoPlayer"
      autoplay
      muted
      loop
      class="aspect-video size-full overflow-hidden object-cover opacity-0 transition-opacity duration-500"
      style="mask-image: linear-gradient(to bottom, rgba(0,0,0,1) 70%, transparent);"
      playsinline
      src='https://res.cloudinary.com/dr2htruiy/video/upload/f_auto:video,q_auto/v1/hauntedfolio/assets/thunder-effect.mp4'
    >
      <source type="video/mp4" src='https://res.cloudinary.com/dr2htruiy/video/upload/f_auto:video,q_auto/v1/hauntedfolio/assets/thunder-effect.mp4' />
    </video>
  </div> -->
  {!spookyAlias 
    && 
    <>
      <textarea name="summary" id="summary" class="hidden">{summary}</textarea>
      <input name="avatarUrl" id="avatarUrl" class="hidden" value={avatarUrl} />
      <input name="username" id="username" class="hidden" value={username} />  
      <div class="w-full mx-auto max-w-4xl flex flex-col justify-center items-center gap-8" id="initialScreen">
        <p class="text-2xl lg:text-4xl text-red-500 font-medium text-center font-body" id="spookyFact">{initialIntro}</p> 
      </div>
    </>
  }
  <UserProfile username={username} githubUrl={githubUrl} spookyAlias={spookyAlias} spookyBio={spookyBio} spookyAvatarUrl={spookyAvatarUrl}/>
</section>

<script>
  // TODO: add dynamic import
  import { BG_PROMPTS, FINAL_MESSAGES, HALLOWEEN_FACTS, INTRODUCTIONS, MASK_PROMPTS } from '@/constants'
  import { getRandomElement } from '@/helpers/getRandomElement'
  import { generateCreepyAvatar } from '@/services/transformations'
  import { pollForProcessingImage } from '@cloudinary-util/util';

  const aliasElement = document.querySelector("[data-alias]")?.getAttribute('data-alias') ?? ''
  
  if(!aliasElement){
    const avatarUrlElement = document.querySelector('#avatarUrl') as HTMLInputElement
    const usernameElement = document.querySelector('#username') as HTMLInputElement
    const spookyFactElement = document.querySelector('#spookyFact') as HTMLParagraphElement
    // const videoEl = document.querySelector("#video-player") as HTMLVideoElement
    const summary = document.querySelector('#summary') as HTMLTextAreaElement
    const summaryValue = summary.value
    
    let TOTAL_INTROS = 0
    const MAX_INTROS = 2

    let intervalId: any
    intervalId = setInterval(() => {
      let text = ''

      if(TOTAL_INTROS < MAX_INTROS){
        text = getRandomElement({ list: INTRODUCTIONS })
        spookyFactElement.textContent = text
        TOTAL_INTROS++
        return
      }

      text = getRandomElement({ list: HALLOWEEN_FACTS })
      spookyFactElement.textContent = text
      
    },3000)

    const stopInterval = () => {
      clearInterval(intervalId)
      intervalId = null
    }

    const response = await fetch('/api/bio', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        summary: summaryValue
      })
    })
    const data = await response.json()
    const { alias, intro, bio } = data
    const bgPrompt = getRandomElement({ list: BG_PROMPTS })
    const maskPrompt = getRandomElement({ list: MASK_PROMPTS })
    
    // Uploading the avatar image to Cloudinary
    const uploadResponse = await fetch('/api/upload', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ avatarUrl: avatarUrlElement.value, username: usernameElement.value, publicId: usernameElement.value })
    })

    const uploadData = await uploadResponse.json()
    if(!uploadData || !uploadData.publicId){
      console.error('Error uploading image')
      stopInterval()
    }else {
      const { publicId } = uploadData
    
      // Generating creepy avatar
      const imageUrl = generateCreepyAvatar({ publicId: publicId, bgPrompt, maskPrompt })
    
      if (await pollForProcessingImage({ src: imageUrl }) ) {

        const uploadResponse = await fetch('/api/upload', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ avatarUrl: imageUrl, username: usernameElement.value, publicId: `${usernameElement.value}-creepy-avatar` })
        })

        const uploadData = await uploadResponse.json()

        stopInterval()

        if(!uploadData || !uploadData.publicId){

        }else {
          const { publicId:creepyAvatarPublicId } = uploadData
      
          const finalMessage = getRandomElement({ list: FINAL_MESSAGES })
          spookyFactElement.textContent = finalMessage
      
          // videoEl.play()
          // Adding details to the user profile
          const userCreepyAlias = document.querySelector('#userCreepyAlias') as HTMLHeadingElement
          const initialScreen = document.querySelector('#initialScreen') as HTMLHeadingElement
          const userCreepyProfile = document.querySelector('#userCreepyProfile') as HTMLDivElement
          const userCreepyBio = document.querySelector('#userCreepyBio') as HTMLParagraphElement
          const useCreepyAvatar = document.querySelector('#userCreepyAvatar') as HTMLImageElement
      
          userCreepyAlias.textContent = alias
          userCreepyBio.textContent = bio
          useCreepyAvatar.src = imageUrl
          
          setTimeout(() => {
            initialScreen.style.display = 'none'
            userCreepyProfile.style.display = 'block'
          },1000)
  
          // Updating spooky data in database
          const responseDB = await fetch('/api/save-details', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              username: usernameElement.value,
              alias,
              bio,
              spookyAvatar: imageUrl,
              intro,
              creepyAvatarPublicId
            })
          })
  
          const dataDB = await responseDB.json()
          if(!dataDB.ok){
            console.error('Error saving spooky data')
          }
        }
      }
    }
  }
</script>